@startuml
package kotlinx.coroutines.flow {
    interface Flow
    interface Map
}

package java.util {
    class UUID
}

package org.springframework.data.mongodb.core {
    class ReactiveFluentMongoOperations
}

package com.acme.artikel {
    package entity {
        class Artikel << entity >>
    }

    package service {
        class ArtikelReadService << control >> << @Service >> {
            + suspend findById(id: UUID?) : FindByIdResult
            + suspend find(suchkriterien: Map<String, String>): Flow<Artikel>
            - suspend findAll() : Flow<Artikel>
            - findByNachname(name: String): Flow<Artikel>
            - findByEinkaufspreis(einkaufspreis: Int): Flow<Artikel>
            - findByVerkaufspreis(verkaufspreis: Int): Flow<Artikel>
            - findByBestand(bestand: Int): Flow<Artikel>
        }

        interface FindByIdResult

        ArtikelReadService .up.> Artikel
        ArtikelReadService ..> Flow
        ArtikelReadService .up.> Map
        ArtikelReadService .up.> UUID
        ArtikelReadService .up.> FindByIdResult
        ArtikelReadService o--> "1" ReactiveFluentMongoOperations : mongo
    }
}
hide empty members
@enduml
